generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Activity {
  activityId                  Int                           @id @default(autoincrement())
  place                       String?                       @db.VarChar(255)
  weekNumber                  Int
  termNumber                  Int
  day                         Days
  type                        ActivityType
  name                        String                        @db.VarChar(255)
  Week                        Week                          @relation(fields: [weekNumber, termNumber], references: [weekNumber, termNumber], onUpdate: Restrict, map: "activity_weeknumber_FK")
  ActivityAttendance          ActivityAttendance[]
  ActivityGuidance            ActivityGuidance[]
  ActivitySectorParticipation ActivitySectorParticipation[]
}

model ActivityAttendance {
  scoutId          Int
  activityId       Int
  score            Int?
  attendanceStatus AttendanceStatus
  Activity         Activity         @relation(fields: [activityId], references: [activityId], onDelete: Cascade, onUpdate: Restrict, map: "activityAttendance_activity_FK")
  Scout            Scout            @relation(fields: [scoutId], references: [scoutId], onDelete: Cascade, onUpdate: Restrict, map: "activityAttendance_scout_FK")

  @@id([scoutId, activityId])
}

model ActivityGuidance {
  activityId Int
  captainId  Int
  Activity   Activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade, onUpdate: Restrict, map: "activityGuidance_activity_FK")
  Captain    Captain  @relation(fields: [captainId], references: [captainId], onDelete: Cascade, onUpdate: Restrict, map: "activityGuidance_captain_FK")

  @@id([activityId, captainId])
}

model ActivitySectorParticipation {
  activityId       Int
  sectorBaseName   String   @db.VarChar
  sectorSuffixName String   @db.VarChar
  Activity         Activity @relation(fields: [activityId], references: [activityId], onDelete: Cascade, onUpdate: Restrict, map: "activityParticipation_activity_FK")
  Sector           Sector   @relation(fields: [sectorBaseName, sectorSuffixName], references: [baseName, suffixName], onDelete: Cascade, onUpdate: Restrict, map: "activityParticipation_sector_FK")

  @@id([activityId, sectorBaseName, sectorSuffixName])
}

model Aspect {
  aspectId         Int            @id @default(autoincrement())
  name             String         @db.VarChar(255)
  sectorBaseName   String         @db.VarChar(255)
  sectorSuffixName String         @db.VarChar(255)
  category         AspectCategory
  Sector           Sector         @relation(fields: [sectorBaseName, sectorSuffixName], references: [baseName, suffixName], onDelete: Cascade, map: "aspect_sectorName_FK")
  ScoutScore       ScoutScore[]
}

model Captain {
  captainId                                                Int                 @id @default(autoincrement())
  firstName                                                String              @db.VarChar(255)
  middleName                                               String              @db.VarChar(255)
  lastName                                                 String              @db.VarChar(255)
  phoneNumber                                              String              @unique(map: "captain_phonenumber_unique") @db.VarChar(255)
  email                                                    String              @unique(map: "captain_email_unique") @db.VarChar(255)
  password                                                 String              @db.VarChar(255)
  rSectorBaseName                                          String?             @db.VarChar(255)
  rSectorSuffixName                                        String?             @db.VarChar(255)
  gender                                                   Gender
  type                                                     CaptainType
  ActivityGuidance                                         ActivityGuidance[]
  Sector_Captain_rSectorBaseName_rSectorSuffixNameToSector Sector?             @relation("Captain_rSectorBaseName_rSectorSuffixNameToSector", fields: [rSectorBaseName, rSectorSuffixName], references: [baseName, suffixName], map: "captain_sector_FK")
  CaptainAttendance                                        CaptainAttendance[]
  notifications                                            Notification[]
  OtherItem                                                OtherItem[]
  Report                                                   Report[]
  Sector_Sector_unitCaptainIdToCaptain                     Sector[]            @relation("Sector_unitCaptainIdToCaptain")
  Session                                                  Session[]
}

model CaptainAttendance {
  captainId        Int
  weekNumber       Int
  termNumber       Int
  attendanceStatus AttendanceStatus
  Captain          Captain          @relation(fields: [captainId], references: [captainId], onDelete: Cascade, onUpdate: Restrict, map: "captainAttendance_regularCaptain_FK")
  Week             Week             @relation(fields: [weekNumber, termNumber], references: [weekNumber, termNumber], onUpdate: Restrict, map: "captainAttendance_week_FK")

  @@id([captainId, weekNumber, termNumber])
}

model FinanceItem {
  itemId       Int             @id @default(autoincrement())
  value        Float
  timestamp    DateTime        @db.Timestamp(0)
  type         FinanceItemType
  OtherItem    OtherItem?
  Subscription Subscription?
}

model Notification {
  id        Int                @id @default(autoincrement())
  type      NotificationType
  status    NotificationStatus
  title     String
  message   String
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  Captain   Captain?           @relation(fields: [captainId], references: [captainId])
  captainId Int?
}

model OtherItem {
  description      String
  itemId           Int         @id
  generalCaptainId Int?
  FinanceItem      FinanceItem @relation(fields: [itemId], references: [itemId], onDelete: Cascade, map: "otherItem_financeItem_FK")
  Captain          Captain?    @relation(fields: [generalCaptainId], references: [captainId], onUpdate: Restrict, map: "otherItem_generalCaptain_FK")
}

model Report {
  reportId  Int      @id @default(autoincrement())
  info      String
  date      DateTime @db.Date
  captainId Int?     @default(autoincrement())
  scoutId   Int
  Captain   Captain? @relation(fields: [captainId], references: [captainId], onUpdate: Restrict, map: "report_captain_FK")
  Scout     Scout    @relation(fields: [scoutId], references: [scoutId], onDelete: Cascade, onUpdate: Restrict, map: "report_scout_FK")
}

model Scout {
  scoutId            Int                  @id @default(autoincrement())
  firstName          String               @db.VarChar(255)
  middleName         String               @db.VarChar(255)
  lastName           String?              @db.VarChar(255)
  expelled           Boolean              @default(false)
  sectorBaseName     String?              @db.VarChar(255)
  sectorSuffixName   String?              @db.VarChar(255)
  gender             Gender?
  ActivityAttendance ActivityAttendance[]
  Report             Report[]
  Sector             Sector?              @relation(fields: [sectorSuffixName, sectorBaseName], references: [suffixName, baseName], map: "scout_sector_FK")
  ScoutAttendance    ScoutAttendance[]
  ScoutProfile       ScoutProfile?
  ScoutScore         ScoutScore[]
}

model ScoutAttendance {
  scoutId          Int
  weekNumber       Int
  termNumber       Int
  attendanceStatus AttendanceStatus
  Scout            Scout            @relation(fields: [scoutId], references: [scoutId], onDelete: Cascade, onUpdate: Restrict, map: "attendance_scout_FK")
  Week             Week             @relation(fields: [weekNumber, termNumber], references: [weekNumber, termNumber], onUpdate: Restrict, map: "attendance_week_FK")

  @@id([scoutId, weekNumber, termNumber])
}

model ScoutProfile {
  birthCertificate String?   @db.VarChar(255)
  birthDate        DateTime? @db.Date
  enrollDate       DateTime? @db.Date
  photo            String?   @db.VarChar(255)
  scoutId          Int       @id
  schoolGrade      Int?
  Scout            Scout     @relation(fields: [scoutId], references: [scoutId], onDelete: Cascade, onUpdate: Restrict, map: "scoutProfile_scout_FK")
}

model ScoutScore {
  scoutId   Int
  aspectId  Int
  score     Int
  timestamp DateTime @db.Timestamp(6)
  Aspect    Aspect   @relation(fields: [aspectId], references: [aspectId], onDelete: Cascade, onUpdate: Restrict, map: "score_aspect_FK")
  Scout     Scout    @relation(fields: [scoutId], references: [scoutId], onDelete: Cascade, onUpdate: Restrict, map: "score_scout_FK")

  @@id([scoutId, aspectId])
}

model Sector {
  baseName                                                  String                        @db.VarChar(255)
  suffixName                                                String                        @db.VarChar(255)
  unitCaptainId                                             Int?
  ActivitySectorParticipation                               ActivitySectorParticipation[]
  Aspect                                                    Aspect[]
  Captain_Captain_rSectorBaseName_rSectorSuffixNameToSector Captain[]                     @relation("Captain_rSectorBaseName_rSectorSuffixNameToSector")
  Scout                                                     Scout[]
  Captain_Sector_unitCaptainIdToCaptain                     Captain?                      @relation("Sector_unitCaptainIdToCaptain", fields: [unitCaptainId], references: [captainId], onUpdate: Restrict, map: "sector_unitCaptain_FK")
  SessionSectorParticipation                                SessionSectorParticipation[]
  Subscription                                              Subscription[]

  @@id([baseName, suffixName])
}

model Session {
  sessionId                  Int                          @id @default(autoincrement())
  title                      String                       @db.VarChar(255)
  documentURL                String?                      @db.VarChar(255)
  captainId                  Int?
  weekNumber                 Int
  termNumber                 Int
  Captain                    Captain?                     @relation(fields: [captainId], references: [captainId], onUpdate: Restrict, map: "session_captain_FK")
  Week                       Week                         @relation(fields: [weekNumber, termNumber], references: [weekNumber, termNumber], onUpdate: Restrict, map: "session_week_FK")
  SessionSectorParticipation SessionSectorParticipation[]
}

model SessionSectorParticipation {
  sessionID        Int
  sectorBaseName   String  @db.VarChar
  sectorSuffixName String  @db.VarChar
  Sector           Sector  @relation(fields: [sectorBaseName, sectorSuffixName], references: [baseName, suffixName], onDelete: Cascade, onUpdate: Restrict, map: "SessionParticipation_Sector_FK")
  Session          Session @relation(fields: [sessionID], references: [sessionId], onDelete: Cascade, onUpdate: Restrict, map: "SessionParticipation_Session_FK")

  @@id([sessionID, sectorBaseName, sectorSuffixName])
}

model Subscription {
  itemId           Int         @id @default(autoincrement())
  sectorBaseName   String?     @db.VarChar(255)
  sectorSuffixName String?     @db.VarChar(255)
  weekNumber       Int
  termNumber       Int
  FinanceItem      FinanceItem @relation(fields: [itemId], references: [itemId], onDelete: Cascade, onUpdate: Restrict, map: "subscription_financeItem_FK")
  Sector           Sector?     @relation(fields: [sectorBaseName, sectorSuffixName], references: [baseName, suffixName], map: "subscription_sector_FK")
  Week             Week        @relation(fields: [weekNumber, termNumber], references: [weekNumber, termNumber], onUpdate: Restrict, map: "subscription_week_FK")
}

model Term {
  termNumber Int      @id @default(autoincrement())
  termName   String?  @db.VarChar(255)
  startDate  DateTime @db.Date
  endDate    DateTime @db.Date
  Week       Week[]
}

model Week {
  weekNumber        Int
  cancelled         Boolean             @default(false)
  startDate         DateTime            @db.Date
  termNumber        Int
  Activity          Activity[]
  CaptainAttendance CaptainAttendance[]
  ScoutAttendance   ScoutAttendance[]
  Session           Session[]
  Subscription      Subscription[]
  Term              Term                @relation(fields: [termNumber], references: [termNumber], onDelete: Cascade, map: "week_term_FK")

  @@id([weekNumber, termNumber])
}

enum ActivityType {
  entertainment
  rowing
  camping
  wildCooking
  scouting
  volunteering
  other
}

enum AspectCategory {
  scoutingSkills
  behaviour
  participation
  exams
  other
}

enum AttendanceStatus {
  absent
  execused
  termExecused
  attended
}

enum CaptainType {
  general
  unit
  regular
}

enum Days {
  sat
  sun
  mon
  tue
  wed
  thu
  fri
}

enum FinanceItemType {
  income
  expense
}

enum Gender {
  male
  female
}

enum NotificationStatus {
  UNREAD
  READ
  DELETED
}

enum NotificationType {
  attendance
  report
  financeItemCreated
  other
}
